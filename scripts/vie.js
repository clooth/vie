// Generated by CoffeeScript 1.7.1
var Targeting, Vie, vie;

Vie = (function() {
  Vie.WIDTH = 1280;

  Vie.HEIGHT = 720;

  Vie.prototype.stage = new PIXI.Stage(0xEEFFFF);

  Vie.prototype.canvas = null;

  function Vie() {
    this.renderer = PIXI.autoDetectRenderer(Vie.WIDTH, Vie.HEIGHT);
    this.renderer.view.id = "vie";
    $("body").append(this.renderer.view);
    this.canvas = $("#vie");
    this.setup();
  }

  Vie.prototype.setup = function() {
    $(window).on("resize", (function(_this) {
      return function() {
        return _this.onResize.apply(_this);
      };
    })(this));
    return this.onResize();
  };

  Vie.prototype.onResize = function() {
    var multiplier, nh, nw, rh, rw, wh, ww;
    ww = window.innerWidth;
    wh = window.innerHeight;
    rw = 640;
    rh = 360;
    multiplier = Math.min(wh / rh, ww / rw);
    nw = rw * multiplier;
    nh = rh * multiplier;
    this.renderer.resize(nw, nh);
    return this.canvas.css({
      'margin-left': "-" + (nw / 2) + "px",
      'margin-top': "-" + (nh / 2) + "px"
    });
  };

  Vie.prototype.start = function() {
    var c, _i, _j, _len, _len1, _ref, _ref1;
    _ref = this.components;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      c.setup.apply(c, [this]);
    }
    _ref1 = this.components;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      c = _ref1[_j];
      c.events.apply(c, [this]);
    }
    return this.cycle();
  };

  Vie.prototype.update = function() {
    var c, _i, _len, _ref, _results;
    _ref = this.components;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      _results.push(c.update.apply(c, [this]));
    }
    return _results;
  };

  Vie.prototype.render = function() {
    var c, _i, _len, _ref, _results;
    _ref = this.components;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      _results.push(c.render.apply(c, [this]));
    }
    return _results;
  };

  Vie.prototype.cycle = function() {
    var callback;
    callback = this.cycle.bind(this);
    requestAnimationFrame(callback);
    this.update();
    this.render();
    return this.renderer.render(this.stage);
  };

  Vie.prototype.components = [];

  Vie.prototype.addComponent = function(component) {
    return this.components.push(component);
  };

  return Vie;

})();

Targeting = (function() {
  Targeting.prototype.active = false;

  Targeting.prototype.source = null;

  Targeting.prototype.destination = null;

  Targeting.prototype.offset = null;

  Targeting.prototype.graphics = new PIXI.Graphics();

  function Targeting() {
    null;
  }

  Targeting.prototype.reset = function() {
    this.graphics.clear();
    this.active = false;
    this.source = null;
    return this.destination = null;
  };

  Targeting.prototype.setup = function(v) {
    this.offset = new PIXI.Point(v.canvas.offset().left, v.canvas.offset().top);
    return v.stage.addChild(this.graphics);
  };

  Targeting.prototype.events = function(v) {
    v.canvas.on("click", (function(_this) {
      return function(e) {
        console.log("targeting click");
        if (_this.active === true) {
          _this.reset();
          return;
        }
        if (_this.active === false) {
          _this.active = true;
          _this.source = new PIXI.Point(e.pageX - _this.offset.x, e.pageY - _this.offset.y);
          _this.destination = new PIXI.Point(e.pageX - _this.offset.x, e.pageY - _this.offset.y);
          return _this.active = true;
        }
      };
    })(this));
    v.canvas.on("mousemove", (function(_this) {
      return function(e) {
        if (_this.active === false) {
          return;
        }
        console.log("targeting move");
        return _this.destination = new PIXI.Point(e.pageX - _this.offset.x, e.pageY - _this.offset.y);
      };
    })(this));
    return v.canvas.on("mouseleave", (function(_this) {
      return function(e) {
        if (_this.active === true) {
          console.log("targeting cancelled");
          return _this.reset();
        }
      };
    })(this));
  };

  Targeting.prototype.update = function(v) {
    this.dashOffset++;
    if (this.dashOffset > 20) {
      return this.dashOffset = 0;
    }
  };

  Targeting.prototype.render = function(v) {
    if (this.active === true) {
      this.graphics.clear();
      this.graphics.lineStyle(10, 0xff0000, 1);
      this.graphics.moveTo(this.source.x, this.source.y);
      this.graphics.lineTo(this.destination.x, this.destination.y);
      return this.graphics.endFill();
    }
  };

  return Targeting;

})();

vie = new Vie();

vie.addComponent(new Targeting(vie));

vie.start();
